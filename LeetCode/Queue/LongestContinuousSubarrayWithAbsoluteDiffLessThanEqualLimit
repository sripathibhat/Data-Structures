/*

Given an array of integers nums and an integer limit, return the size of the longest non-empty subarray such that the absolute difference between any two elements of this subarray is less than or equal to limit.

 

Example 1:

Input: nums = [8,2,4,7], limit = 4
Output: 2 
Explanation: All subarrays are: 
[8] with maximum absolute diff |8-8| = 0 <= 4.
[8,2] with maximum absolute diff |8-2| = 6 > 4. 
[8,2,4] with maximum absolute diff |8-2| = 6 > 4.
[8,2,4,7] with maximum absolute diff |8-2| = 6 > 4.
[2] with maximum absolute diff |2-2| = 0 <= 4.
[2,4] with maximum absolute diff |2-4| = 2 <= 4.
[2,4,7] with maximum absolute diff |2-7| = 5 > 4.
[4] with maximum absolute diff |4-4| = 0 <= 4.
[4,7] with maximum absolute diff |4-7| = 3 <= 4.
[7] with maximum absolute diff |7-7| = 0 <= 4. 
Therefore, the size of the longest subarray is 2.
Example 2:

Input: nums = [10,1,2,4,7,2], limit = 5
Output: 4 
Explanation: The subarray [2,4,7,2] is the longest since the maximum absolute diff is |2-7| = 5 <= 5.
Example 3:

Input: nums = [4,2,2,2,4,4,2,2], limit = 0
Output: 3

*/


class Solution {
    public int longestSubarray(int[] nums, int limit) {
        // TreeMap<Integer, Integer> window = new TreeMap<>();
        // int maxLength = 0;
        // int left = 0;
        
        // // Iterate through the array with right pointer
        // for (int right = 0; right < nums.length; right++) {
        //     // Add current number to window
        //     window.put(nums[right], window.getOrDefault(nums[right], 0) + 1);
            
        //     // While the difference between max and min in window exceeds limit
        //     while (window.lastKey() - window.firstKey() > limit) {
        //         // Remove leftmost element
        //         window.put(nums[left], window.get(nums[left]) - 1);
        //         if (window.get(nums[left]) == 0) {
        //             window.remove(nums[left]);
        //         }
        //         left++;
        //     }
            
        //     // Update max length
        //     maxLength = Math.max(maxLength, right - left + 1);
        // }
        
        // return maxLength;

        // Deque to maintain maximum values
        Deque<Integer> maxDeque = new ArrayDeque<>();
        // Deque to maintain minimum values
        Deque<Integer> minDeque = new ArrayDeque<>();
        
        int left = 0;
        int maxLength = 0;
        
        // Iterate through the array with right pointer
        for (int right = 0; right < nums.length; right++) {
            // Maintain maximum deque
            while (!maxDeque.isEmpty() && nums[right] > nums[maxDeque.peekLast()]) {
                maxDeque.pollLast();
            }
            maxDeque.offerLast(right);
            
            // Maintain minimum deque
            while (!minDeque.isEmpty() && nums[right] < nums[minDeque.peekLast()]) {
                minDeque.pollLast();
            }
            minDeque.offerLast(right);
            
            // Remove elements outside the window
            while (!maxDeque.isEmpty() && !minDeque.isEmpty() && 
                   nums[maxDeque.peekFirst()] - nums[minDeque.peekFirst()] > limit) {
                if (maxDeque.peekFirst() <= left) maxDeque.pollFirst();
                if (minDeque.peekFirst() <= left) minDeque.pollFirst();
                left++;
            }
            
            maxLength = Math.max(maxLength, right - left + 1);
        }
        
        return maxLength;
    }
}
